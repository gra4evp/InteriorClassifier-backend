import logging
from aiogram import Dispatcher, Router, F
from aiogram.types import Message, PhotoSize, Document
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.media_group import m
from io import BytesIO
import uuid

from services.classification_service import ClassificationService
from utils.file_validator import validate_image_file
from utils.response_formatter import format_classification_result
from keyboards.reply import get_main_keyboard
from config import Config

logger = logging.getLogger(__name__)
router = Router()


SUPPORTED_EXTENSIONS = {".jpg", ".jpeg", ".png", ".webp"}


@router.message(Command("classify"))
async def cmd_classify(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    await message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, JPEG, PNG, WEBP\n"
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB\n"
        "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ 5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ."
    )


# @router.message(F.photo)
# async def handle_photo(message: Message):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
#     await process_image(message, message.photo[-1])


# @router.message(F.document)
# async def handle_document(message: Message):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)"""
#     document = message.document
    
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
#     if not validate_image_file(document):
#         await message.answer(
#             "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.\n"
#             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG, JPEG, PNG –∏–ª–∏ WEBP."
#         )
#         return
    
#     await process_image(message, document)


# async def process_image(message: Message, file):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é"""
#     try:
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
#         processing_msg = await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
#         # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
#         file_info = await message.bot.get_file(file.file_id)
#         file_path = file_info.file_path
        
#         # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
#         file_data = await message.bot.download_file(file_path)
        
#         # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ BytesIO
#         file_bytes = file_data.read()
        
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
#         if len(file_bytes) > Config.MAX_FILE_SIZE:
#             await processing_msg.edit_text(
#                 "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π.\n"
#                 f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {Config.MAX_FILE_SIZE // 1024 // 1024}MB"
#             )
#             return
        
#         # –°–æ–∑–¥–∞–µ–º BytesIO –æ–±—ä–µ–∫—Ç
#         file_io = BytesIO(file_bytes)
        
#         # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
#         if isinstance(file, PhotoSize):
#             # –î–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
#             filename = f"photo_{uuid.uuid4().hex[:8]}.jpg"
#         elif isinstance(file, Document):
#             # –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è
#             filename = file.file_name or "document.jpg"
#         else:
#             # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
#             filename = f"file_{uuid.uuid4().hex[:8]}.jpg"
        
#         # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
#         classification_service = ClassificationService()
        
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
#         result = await classification_service.classify_single_image(
#             file_io, 
#             filename
#         )
        
#         # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
#         formatted_result = format_classification_result(result)
#         await processing_msg.edit_text(formatted_result, parse_mode="HTML")
        
#         logger.info(f"Successfully classified image for user {message.from_user.id}")
        
#     except Exception as e:
#         logger.error(f"Error processing image: {e}")
#         await processing_msg.edit_text(
#             "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n"
#             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
#         )


def is_supported(filename: str) -> bool:
    return any(filename.lower().endswith(ext) for ext in SUPPORTED_EXTENSIONS)


@router.message(F.media_group_id | F.photo | F.document)
async def handle_images(message: Message):

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")

    files = []
    file_names = []
    bot = message.bot

    # 1. –ï—Å–ª–∏ —ç—Ç–æ –∞–ª—å–±–æ–º (media group)
    if message.media_group_id is not None:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∞–ª—å–±–æ–º–∞
        
        media_group = await bot.get_media_group(message.chat.id, message.message_id)
        for idx, msg in enumerate(media_group, start=1):
            if msg.photo:
                file = msg.photo[-1]
                filename = f"photo_{idx}.jpg"
            elif msg.document and is_supported(msg.document.file_name):
                file = msg.document
                filename = msg.document.file_name
            else:
                continue
            file_info = await bot.get_file(file.file_id)
            file_data = await bot.download_file(file_info.file_path)
            file_bytes = file_data.read()
            files.append(BytesIO(file_bytes))
            file_names.append(filename)
    else:
        # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç
        if message.photo:
            file = message.photo[-1]
            filename = f"photo.jpg"
        elif message.document and is_supported(message.document.file_name):
            file = message.document
            filename = message.document.file_name
        else:
            await processing_msg.edit_text("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è JPG, JPEG, PNG, WEBP.")
            return
        file_info = await bot.get_file(file.file_id)
        file_data = await bot.download_file(file_info.file_path)
        file_bytes = file_data.read()
        files.append(BytesIO(file_bytes))
        file_names.append(filename)

    if not files:
        await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
        return

    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á –Ω–∞ backend
    classification_service = ClassificationService()
    try:
        result = await classification_service.classify_multiple_images(list(zip(files, file_names)))
    except Exception as e:
        logger.error(f"Error during classification: {e}")
        await processing_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # 3. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    formatted = format_classification_result(result)
    await processing_msg.edit_text(formatted, parse_mode="HTML")


def register_image_handlers(dp: Dispatcher) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
    dp.include_router(router)
