import logging
from aiogram import Dispatcher, Router, F
from aiogram.types import Message, PhotoSize, Document
from aiogram.filters import Command
from io import BytesIO
import uuid

from services.classification_service import ClassificationService
from utils.file_validator import validate_image_file
from utils.response_formatter import format_classification_result
from keyboards.reply import get_main_keyboard
from config import Config
from middlewares.album import AlbumMiddleware

logger = logging.getLogger(__name__)
router = Router()
router.message.middleware(AlbumMiddleware())


SUPPORTED_EXTENSIONS = {".jpg", ".jpeg", ".png", ".webp"}


@router.message(Command("classify"))
async def cmd_classify(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    await message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, JPEG, PNG, WEBP\n"
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB\n"
        "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ 5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ."
    )


# @router.message(F.photo)
# async def handle_photo(message: Message):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
#     await process_image(message, message.photo[-1])


# @router.message(F.document)
# async def handle_document(message: Message):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)"""
#     document = message.document
    
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
#     if not validate_image_file(document):
#         await message.answer(
#             "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.\n"
#             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG, JPEG, PNG –∏–ª–∏ WEBP."
#         )
#         return
    
#     await process_image(message, document)


# async def process_image(message: Message, file):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é"""
#     try:
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
#         processing_msg = await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
#         # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
#         file_info = await message.bot.get_file(file.file_id)
#         file_path = file_info.file_path
        
#         # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
#         file_data = await message.bot.download_file(file_path)
        
#         # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ BytesIO
#         file_bytes = file_data.read()
        
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
#         if len(file_bytes) > Config.MAX_FILE_SIZE:
#             await processing_msg.edit_text(
#                 "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π.\n"
#                 f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {Config.MAX_FILE_SIZE // 1024 // 1024}MB"
#             )
#             return
        
#         # –°–æ–∑–¥–∞–µ–º BytesIO –æ–±—ä–µ–∫—Ç
#         file_io = BytesIO(file_bytes)
        
#         # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
#         if isinstance(file, PhotoSize):
#             # –î–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
#             filename = f"photo_{uuid.uuid4().hex[:8]}.jpg"
#         elif isinstance(file, Document):
#             # –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è
#             filename = file.file_name or "document.jpg"
#         else:
#             # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
#             filename = f"file_{uuid.uuid4().hex[:8]}.jpg"
        
#         # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
#         classification_service = ClassificationService()
        
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
#         result = await classification_service.classify_single_image(
#             file_io, 
#             filename
#         )
        
#         # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
#         formatted_result = format_classification_result(result)
#         await processing_msg.edit_text(formatted_result, parse_mode="HTML")
        
#         logger.info(f"Successfully classified image for user {message.from_user.id}")
        
#     except Exception as e:
#         logger.error(f"Error processing image: {e}")
#         await processing_msg.edit_text(
#             "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n"
#             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
#         )


def is_supported(filename: str) -> bool:
    return any(filename.lower().endswith(ext) for ext in SUPPORTED_EXTENSIONS)

async def extract_file_and_name(msg: Message, image_filename: str = None) -> tuple[BytesIO, str] | None:
    """Extracts file and filename from a message if it's a supported image.
    For photos, uses image_filename if provided. For documents, always uses the original filename."""
    if msg.photo:
        file = msg.photo[-1]
        filename = image_filename or f"photo_{file.file_id}.jpg"
    elif msg.document and is_supported(msg.document.file_name):
        file = msg.document
        filename = msg.document.file_name  # Always use original name for documents
    else:
        return None
    file_info = await msg.bot.get_file(file.file_id)
    file_data = await msg.bot.download_file(file_info.file_path)
    file_bytes = file_data.read()
    return BytesIO(file_bytes), filename

async def process_images(message: Message, files: list[tuple[BytesIO, str]]):
    """Sends images for classification and returns results to the user."""
    processing_msg = await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ(—è)...")
    classification_service = ClassificationService()
    try:
        result = await classification_service.classify_multiple_images(files)
    except Exception as e:
        logger.error(f"Error during classification: {e}")
        await processing_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    # Format and send results
    for res in result.get("results", []):
        formatted = format_classification_result(res)
        await message.answer(formatted, parse_mode="HTML")
    await processing_msg.delete()

@router.message(F.photo | F.document)
async def handle_images(message: Message, album: list[Message] = None):
    """
    Universal handler for single and batch images.
    If album is not None, it's a batch; otherwise, it's a single image.
    """
    files = []

    if album:
        # Batch of images (album)
        for idx, msg in enumerate(album, start=1):
            if msg.photo:
                result = await extract_file_and_name(msg, image_filename=f"image_{idx}.jpg")
            else:
                result = await extract_file_and_name(msg)
            if result:
                files.append(result)
        if not files:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∞–ª—å–±–æ–º–µ.")
            return
        await process_images(message, files)
    else:
        # Single image
        if message.photo:
            result = await extract_file_and_name(message, image_filename="image.jpg")
        else:
            result = await extract_file_and_name(message)
        if not result:
            await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è JPG, JPEG, PNG, WEBP.")
            return
        await process_images(message, [result])


def register_image_handlers(dp: Dispatcher) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
    dp.include_router(router)
