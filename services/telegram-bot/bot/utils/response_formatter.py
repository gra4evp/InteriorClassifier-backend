from typing import Dict, Any, List


def format_classification_result(result: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    Args:
        result: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç API
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    if not result or 'results' not in result:
        return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"
    
    results = result['results']
    if not results:
        return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"
    
    # –ï—Å–ª–∏ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if len(results) == 1:
        return format_single_result(results[0])
    
    # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    return format_multiple_results(results)


def format_single_result(result: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    class_name = result.get('class_name', 'Unknown')
    probabilities = result.get('probabilities', [])
    image_name = result.get('image_name', '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–ª–∞—Å—Å–∞
    class_emoji = get_class_emoji(class_name)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    prob_text = format_probabilities(probabilities, sorted_by_probability=True)
    
    text_lines = [
        f"üè† <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏</b>\n",
        f"üì∏ <b>–§–∞–π–ª:</b> {image_name}",
        f"{class_emoji} <b>–ö–ª–∞—Å—Å –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞:</b> <code>{class_name}</code>\n\n",
        f"üìä <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π:</b>",
        prob_text
    ]
    
    return "\n".join(text_lines)


def format_multiple_results(results: List[Dict[str, Any]]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    header = f"üè† <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ ({len(results)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)</b>\n\n"
    
    formatted_results = []
    for i, result in enumerate(results, 1):
        class_name = result.get('class_name', 'Unknown')
        image_name = result.get('image_name', f'–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i}')
        class_emoji = get_class_emoji(class_name)
        
        formatted_results.append(
            f"{i}. {class_emoji} <b>{image_name}</b> ‚Üí <code>{class_name}</code>"
        )
    
    return header + "\n".join(formatted_results)


def get_class_emoji(class_name: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–ª–∞—Å—Å–∞ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞"""
    emoji_map = {
        'A0': 'üß±',
        'A1': 'üèöÔ∏è',
        'B0': '‚óªÔ∏è',
        'B1': 'üé®',
        'C0': '‚òëÔ∏è',
        'C1': 'üè†',
        'D0': '‚ú®',
        'D1': 'üíé',
    }
    return emoji_map.get(class_name, 'üè†')


def format_probabilities(
        probabilities: List[float],
        sorted_by_probability: bool = False
    ) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π"""
    class_names = ['A0', 'A1', 'B0', 'B1', 'C0', 'C1', 'D0', 'D1']
    
    if len(probabilities) != len(class_names):
        return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤"
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–∫–ª–∞—Å—Å, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å) –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    class_probs = list(zip(class_names, probabilities))
    if sorted_by_probability:
        class_probs.sort(key=lambda x: x[1], reverse=True)
    
    formatted_lines = []
    for class_name, prob in class_probs:
        emoji = get_class_emoji(class_name)
        percentage = prob * 100
        bar_length = int(percentage / 5)  # 5% = 1 —Å–∏–º–≤–æ–ª
        bar = '‚ñà' * bar_length + '‚ñë' * (20 - bar_length)
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º, –µ—Å–ª–∏ –º–µ–Ω—å—à–µ 10 –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
        percent_str = f" {percentage:.1f}%" if percentage < 10 else f"{percentage:.1f}%"
        formatted_lines.append(
            f"{emoji} {class_name}: {percent_str} {bar}"
        )
    
    return "\n".join(formatted_lines) 